{"version":3,"sources":["images/icon-sun.svg","images/icon-moon.svg","hooks/useTheme.jsx","components/Banner.jsx","components/AddTask.jsx","images/icon-cross.svg","images/icon-check.svg","components/Task.jsx","initialState.js","hooks/useInitialState.js","components/TaskList.jsx","components/Nav.jsx","components/Container.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["useTheme","theme","useLayoutEffect","key","document","documentElement","style","setProperty","Banner","light_theme","dark_theme","useState","setTheme","className","onClick","currentTheme","JSON","stringify","console","log","src","sun","moon","alt","AddTask","Task","completed","handleCheck","name","id","Check","Cross","task","useInitialState","initialState","state","setState","newState","map","item","deleteTask","TaskList","active","stateInit","activeTask","filter","taskCompleted","uuid","length","Nav","handleShowCompleted","handleShowActive","handleShowAll","whichShow","setWhichShow","Container","showCompleted","setShowCompleted","showActive","setShowActive","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a4ce3693.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon-sun.ad189f9c.svg\";","export default __webpack_public_path__ + \"static/media/icon-moon.6c03114b.svg\";","import {useLayoutEffect} from 'react'\n\nfunction useTheme(theme) {\n    useLayoutEffect(\n        () => {\n            for (const key in theme) {\n                document.documentElement.style.setProperty(`--${key}`, theme[key])\n            }\n        },\n        [theme]\n    )\n}\n\nexport default useTheme\n","import React, { useState } from 'react'\n// import React from 'react'\n\nimport sun from '../images/icon-sun.svg'\nimport moon from '../images/icon-moon.svg'\n\nimport useTheme from '../hooks/useTheme'\n\nimport '../styles/Banner.css'\n\nfunction Banner() {\n    const light_theme = {\n        'task': '#fff',\n        'background': '#F6F6F8',\n        'border_dark': '#9B9BA3',\n        'text': '#555660'\n    }\n\n    const dark_theme = {\n        'task': '#25273C',\n        'background': 'hsl(235, 21%, 11%)',\n        'border_dark': '#373a54',\n        'text': '#555660'\n    }\n\n    const [theme, setTheme] = useState(light_theme)\n\n    const handleTheme = () => {\n        let currentTheme = (JSON.stringify(dark_theme) == JSON.stringify(theme) ? light_theme : dark_theme)\n        setTheme(currentTheme)\n        console.log(currentTheme)\n        // console.log(theme)\n    }\n\n    useTheme(theme)\n\n    return (\n        <div className=\"banner\">\n            <div className=\"banner__wrapper\">\n                <h1>TODO</h1>\n                <button className=\"theme__selector\" onClick={handleTheme}>\n                    <img src={JSON.stringify(dark_theme) == JSON.stringify(theme) ? sun : moon} alt=\"Sun\" />\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Banner\n","import React from 'react'\n\nimport '../styles/AddTask.css'\nfunction AddTask() {\n    return (\n        <div className=\"add__task\">\n            <div className=\"circle\">\n            </div>\n            <span>Create a new todo</span>\n        </div>\n    )\n}\n\nexport default AddTask\n","export default __webpack_public_path__ + \"static/media/icon-cross.6ee81d30.svg\";","export default __webpack_public_path__ + \"static/media/icon-check.a8fb15d0.svg\";","// @ts-nocheck\nimport React from 'react'\n\nimport Cross from '../images/icon-cross.svg'\nimport Check from '../images/icon-check.svg'\nimport PropTypes from 'prop-types'\n\nimport '../styles/Task.css'\n\n\n/**\n * @param {object} props - Task Properties\n * @param {boolean} props.completed - Is task compled?\n * @param {onClick} props.handleCheck- Is task compled?\n */\n\nfunction Task({completed, handleCheck, name, id}) {\n    return (\n        <div className={'task ' + (completed && 'completed')} >\n            <div className=\"wrapper\">\n                <button className={'check ' + (completed && 'checked')} onClick={() => handleCheck(id)}>\n                    {completed && <img src={Check} alt=\"\" />}\n                </button>\n                <span className={completed ? 'completed' : ''}>{name}</span>\n            </div>\n            <img src={Cross} alt=\"\" />\n        </div>\n    )\n}\n\nTask.propTypes = {\n    handleCheck: PropTypes.func,\n    completed: PropTypes.bool\n}\n\nexport default Task\n","export default [\n    {\n        id: 1,\n        task: 'Task 1',\n        completed: true,\n    },\n    {\n        id: 2,\n        task: 'Task 2',\n        completed: true,\n    },\n    {\n        id: 3,\n        task: 'Task 3',\n        completed: false,\n    },\n    {\n        id: 4,\n        task: 'Task 4',\n        completed: false,\n    },\n    {\n        id: 5,\n        task: 'Task 5',\n        completed: false,\n    },\n    {\n        id: 6,\n        task: 'Task 6',\n        completed: false,\n    }\n]","import initialState from '../initialState.js'\n\nimport {useState} from 'react'\n\n\nconst useInitialState = () => {\n    const [state, setState] = useState(initialState)\n\n    const handleCheck = (task) => {\n        const newState = state.map((item) => (item.id === task) ? {...item, 'completed': !item.completed} : item)\n        setState([\n            ...newState\n        ])\n    }\n\n    const deleteTask = () => {\n        console.log('deleted')\n    \n    }\n\n    return {\n        state,\n        handleCheck,\n        deleteTask\n    }\n}\n\nexport default useInitialState\n\n","import React from 'react'\nimport Task from './Task'\nimport {v4 as uuid} from 'uuid'\nimport  useInitialState from '../hooks/useInitialState'\nimport '../styles/TaskList.css'\n\nfunction TaskList({completed, active}) {\n    const stateInit = useInitialState()\n    const {state, handleCheck} = stateInit\n\n    const activeTask = state.filter((item) => item.completed === false)\n    const taskCompleted = state.filter((item) => item.completed)\n\n    if (completed)\n    {\n        return (\n            <div className=\"task__list\">\n                {taskCompleted.map(({completed, task, id}) => <Task name={task} completed={completed} handleCheck={handleCheck} key={uuid()} id={id}/>)}\n                <div className=\"resume\">\n                    <span>{activeTask.length} items left</span>\n                    <span>Clear Completed</span>\n                </div>\n            </div>\n        )\n    }\n\n    if (active)\n    {\n        return (\n            <div className=\"task__list\">\n                {activeTask.map(({completed, task, id}) => <Task name={task} completed={completed} handleCheck={handleCheck} key={uuid()} id={id}/>)}\n                <div className=\"resume\">\n                    <span>{activeTask.length} items left</span>\n                    <span>Clear Completed</span>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"task__list\">\n            {state.map(({completed, task, id}) => <Task name={task} completed={completed} handleCheck={handleCheck} key={uuid()} id={id}/>)}\n            <div className=\"resume\">\n                <span>{activeTask.length} items left</span>\n                <span>Clear Completed</span>\n            </div>\n        </div>\n    )\n}\n\nexport default TaskList\n","import React, {useState} from 'react'\n\nimport '../styles/Nav.css'\n\nfunction Nav({handleShowCompleted, handleShowActive, handleShowAll}) {\n\n    const [whichShow, setWhichShow] = useState(0)\n    const showActive = () => {\n        setWhichShow(1)\n        handleShowActive()\n    }\n\n    const showCompleted = () => {\n        setWhichShow(2)\n        handleShowCompleted()\n    }\n\n    const showAll = () => {\n        setWhichShow(0)\n        handleShowAll()\n    }\n\n    return (\n        <div>\n            <div className=\"nav\">\n                <button className={whichShow === 0 ? 'selected' : ''} onClick={showAll}>All</button>\n                <button className={whichShow === 1 ? 'selected' : ''} onClick={showActive}>Active</button>\n                <button className={whichShow === 2 ? 'selected' : ''} onClick={showCompleted}>Complete</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Nav\n","import React, {useState} from 'react'\nimport AddTask from './AddTask'\nimport TaskList from './TaskList'\nimport Nav from './Nav'\n\nimport '../styles/Container.css'\n\nfunction Container() {\n    const [showCompleted, setShowCompleted] = useState(false)\n    const [showActive, setShowActive] = useState(false)\n\n    const handleShowCompleted = () => {\n        if (showActive === true){\n            setShowActive(false)\n        }\n        setShowCompleted(true)\n    }\n\n    const handleShowActive = () => {\n        if (showCompleted === true){\n            setShowCompleted(false)\n        }\n        setShowActive(true)\n    }\n\n    const handleShowAll = () => {\n        setShowActive(false)\n        setShowCompleted(false)\n    }\n\n    return (\n        <div className=\"container\">\n            <AddTask />\n            <TaskList completed={showCompleted} active={showActive}/>\n            <Nav handleShowCompleted={handleShowCompleted} handleShowActive={handleShowActive} handleShowAll={handleShowAll}/>\n            <span>Drag and drop to reorder list</span>\n        </div>\n    )\n}\n\nexport default Container\n","import React from 'react'\nimport Banner from './components/Banner'\nimport Container from './components/Container'\n\nimport './styles/App.css'\n\nfunction App() {\n   \n    return (\n\n        <div className=\"App\">\n            <Banner />\n            <Container />\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App.jsx'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}